{"version":3,"sources":["components/AddItemForm.tsx","components/EditableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","errorInputStyle","border","outline","undefined","TaskTestHandler","taskTitle","trim","callBack","style","value","onChange","e","currentTarget","onKeyDown","key","onClick","color","EditableSpan","newTitle","setNewTitle","edit","setEdit","EditTrueHAndler","ChangeTitleHandler","taskClasses","isDone","onBlur","autoFocus","type","className","onDoubleClick","TodoList","tasksMap","tasks","length","map","t","id","checked","changeTaskStatus","todoListID","editTask","RemoveTask","buttonClassALL","filter","buttonClassActive","buttonClassCompleted","editTodolist","removeTodolist","addTask","changeFilter","App","todolistID1","v1","todolistID2","toDolists","setToDolists","setTasks","removeTask","tasksID","el","newTask","toDoListID","taskId","newId","tasksForRender","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b4a4f51e.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\ntype AddItemFormPropsType = {\r\n    callBack:(title:string)=>void\r\n}\r\n\r\nexport const AddItemForm = (props:AddItemFormPropsType) => {\r\n\r\n\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const errorInputStyle = error ? {border: \"2px solid red\", outline: \"none\"} : undefined\r\n\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        if (error && e.currentTarget.value.trim()) {\r\n            setError(false)\r\n        }\r\n    }\r\n    const pressEnter = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        e.key === \"Enter\" && TaskTestHandler() // &&- И при нажати и тру и она запускаеть функцию\r\n    }\r\n    const TaskTestHandler = () => {\r\n        let taskTitle: string = title.trim();\r\n        if (taskTitle !== \"\") {\r\n            props.callBack(taskTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n\r\n        setTitle(\"\")\r\n    }\r\n\r\n    return (\r\n\r\n\r\n        <div>\r\n            <input\r\n                style={errorInputStyle}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyDown={pressEnter} //e.key === \"Enter\" && addTasksHandler()  (e)=>{if(e.key === 'Enter')addTasksHandler()}\r\n            />\r\n\r\n            <button onClick={TaskTestHandler}>+</button>\r\n            {error && <div style={{color: \"red\"}}>Title is required!</div>}\r\n        </div>\r\n    );\r\n};\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {log} from \"util\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    callBack: (newTitle: string) => void\r\n    isDone?: boolean\r\n}\r\n\r\n\r\nexport const EditableSpan = (props: EditableSpanPropsType) => {\r\n    const [error, setError] = useState<boolean>(false)\r\n    const [newTitle, setNewTitle] = useState<string>(props.title)\r\n\r\n\r\n    const [edit, setEdit] = useState(false)\r\n\r\n\r\n    const EditTrueHAndler = () => {\r\n        setEdit(!edit)\r\n        ChangeTitleHandler()\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitle(e.currentTarget.value)\r\n        if (error && e.currentTarget.value.trim()) {\r\n            setError(false)\r\n        }\r\n    }\r\n    const pressEnter = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        e.key === \"Enter\" && EditTrueHAndler()\r\n    }\r\n\r\n    const ChangeTitleHandler = () => {\r\n        let taskTitle: string = newTitle.trim();\r\n        if (taskTitle !== \"\") {\r\n            props.callBack(taskTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n    const taskClasses = props.isDone ? \"is-done\" : \"\";\r\n\r\n    return (\r\n        edit\r\n            ? <input\r\n                onChange={onChangeHandler}\r\n                onBlur={EditTrueHAndler}\r\n                autoFocus type=\"text\"\r\n                onKeyDown={pressEnter}\r\n                value={newTitle}/>\r\n            : <span className={taskClasses}\r\n                    onDoubleClick={EditTrueHAndler}> {props.title}\r\n                {error && <div style={{color: \"red\"}}>Title is required!</div>}\r\n            </span>\r\n\r\n    );\r\n};\r\n","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport {FilterValuesType, TaskType} from \"./App\"\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport {EditableSpan} from \"./components/EditableSpan\";\r\n\r\n\r\ntype TodoListPropsType = {\r\n    todoListID:string\r\n    title: string\r\n    tasks: Array<TaskType> //Tasktype []\r\n    filter: FilterValuesType\r\n    RemoveTask: (todoListID: string,taskID: string) => void\r\n    changeFilter: (todoListID: string,filter: FilterValuesType) => void\r\n    addTask: (todoListID: string,title: string) => void\r\n    changeTaskStatus: (todoListID: string,tasksID: string, isDone: boolean) => void\r\n    removeTodolist:(todoListID: string)=>void\r\n    editTodolist:(toDoListID: string, newTitle: string) => void\r\n    editTask:(toDoListID: string,taskId:string, newTitle: string)=>void\r\n\r\n}\r\n\r\nconst TodoList = (props: TodoListPropsType) => {\r\n\r\n    const tasksMap = props.tasks.length\r\n        ? props.tasks.map((t) => {\r\n            const editTasktHandler=(newTitle:string)=> {\r\n                props.editTask(props.todoListID,t.id,newTitle)\r\n            }\r\n            const removeTask = () => props.RemoveTask(props.todoListID,t.id)\r\n            const ChangeTaskHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                props.changeTaskStatus(props.todoListID,t.id, e.currentTarget.checked)\r\n            }\r\n\r\n            return (<li key={t.id}>\r\n                <input type=\"checkbox\"\r\n                       checked={t.isDone}\r\n                       onChange={ChangeTaskHandler}/>\r\n                <EditableSpan isDone={t.isDone} title={t.title} callBack={editTasktHandler}/>\r\n\r\n                <button onClick={removeTask}>x</button>\r\n\r\n            </li>)\r\n        })\r\n        : <span>empty</span>\r\n\r\n\r\n    const addTaskHandler =(title:string)=>{\r\n        props.addTask(props.todoListID,title)\r\n    }\r\n\r\n    const onClickRemoveTodoListHandler = () => {\r\n        props.removeTodolist(props.todoListID)\r\n\r\n    }\r\n    const editTodolistHandler=(newTitle:string)=> {\r\n        props.editTodolist(props.todoListID,newTitle)\r\n    }\r\n\r\n\r\n\r\n    const buttonClassALL = props.filter === 'all' ? \"active-filter\" : \"\"\r\n    const buttonClassActive = props.filter === 'active' ? \"active-filter\" : \"\"\r\n    const buttonClassCompleted = props.filter === 'completed' ? \"active-filter\" : \"\"\r\n    return (\r\n        <div>\r\n            <h3>\r\n\r\n                <EditableSpan title={props.title} callBack={editTodolistHandler}/>\r\n                <button onClick={onClickRemoveTodoListHandler}>x</button>\r\n            </h3>\r\n            <AddItemForm  callBack={addTaskHandler}/>\r\n            <ul>\r\n                {tasksMap}\r\n            </ul>\r\n\r\n            <div>\r\n                <button\r\n                    className={buttonClassALL}\r\n                    onClick={() => props.changeFilter(props.todoListID,\"all\")}>All\r\n                </button>\r\n                <button\r\n                    className={buttonClassActive}\r\n                    onClick={() => props.changeFilter(props.todoListID,\"active\")}>Active\r\n                </button>\r\n                <button\r\n                    className={buttonClassCompleted}\r\n                    onClick={() => props.changeFilter(props.todoListID,\"completed\")}>Completed\r\n                </button>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoList;\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\n\r\nexport type TaskType = {\r\n    id: string, title: string, isDone: boolean\r\n}\r\n\r\n\r\nexport type TasksType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\nexport type TodolistsType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilterValuesType\r\n}\r\n\r\nconst App = () => {\r\n\r\n    let todolistID1 = v1();\r\n    let todolistID2 = v1();\r\n\r\n    let [toDolists, setToDolists] = useState<Array<TodolistsType>>([\r\n        {id: todolistID1, title: 'What to learn Front', filter: 'all'},\r\n        {id: todolistID2, title: 'What to learn Back', filter: 'all'},\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksType>({\r\n        [todolistID1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false},\r\n        ],\r\n        [todolistID2]: [\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"NodeJS\", isDone: true},\r\n            {id: v1(), title: \"C#\", isDone: false},\r\n            {id: v1(), title: \"Mongodb\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false},\r\n        ]\r\n    });\r\n\r\n    const removeTask = (todoListID: string, tasksID: string) => {\r\n        setTasks({...tasks, [todoListID]: tasks[todoListID].filter(el => el.id !== tasksID)})\r\n\r\n        //  setTasks(tasks.filter((t) => t.id !== tasksID));\r\n    }\r\n    const changeFilter = (todoListID: string, filter: FilterValuesType) => {\r\n        setToDolists(toDolists.map(el => el.id === todoListID ? {...el, filter} : el))\r\n    }\r\n\r\n    const addTask = (todoListID: string, title: string) => {\r\n        const newTask: TaskType = {\r\n            id: v1(), title: title, isDone: false,\r\n        }\r\n\r\n        setTasks({...tasks, [todoListID]: [newTask,...tasks[todoListID]]})\r\n\r\n    }\r\n\r\n    const changeTaskStatus = (todoListID: string, tasksID: string, isDone: boolean) => {\r\n        setTasks({...tasks, [todoListID]: tasks[todoListID].map(el => el.id === tasksID ? {...el, isDone} : el)})\r\n\r\n    }\r\n\r\n    const removeTodolist = (todoListID: string) => {\r\n        setToDolists(toDolists.filter(el => el.id !== todoListID))\r\n\r\n    }\r\n    const addTodoList = (title: string) => {\r\n        const newId = v1();\r\n        let newTodolist:TodolistsType = {id: newId, title, filter: \"all\"}\r\n        setToDolists([newTodolist, ...toDolists ])\r\n        setTasks({...tasks,[newId]:[{id: v1(), title: \"New Task\", isDone: false},]})\r\n    }\r\n    const editTodolist = (toDoListID: string, newTitle: string) => {\r\n        setToDolists(toDolists.map(el=>el.id === toDoListID ? {...el, title:newTitle}: el))\r\n    }\r\n    const editTask = (toDoListID: string,taskId:string, newTitle: string) => {\r\n        setTasks({\r\n            ...tasks,\r\n            [toDoListID]: tasks[toDoListID].map(el => el.id === taskId ? {...el, title: newTitle} : el)\r\n        })\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"App\">\r\n            <span>Add todoList </span>-\r\n            <AddItemForm callBack={addTodoList}/>\r\n\r\n            {toDolists.map((el) => {\r\n\r\n                let tasksForRender = tasks[el.id]\r\n                if (el.filter === 'active') {\r\n                    tasksForRender = tasks[el.id].filter(t => !t.isDone)\r\n                }\r\n                if (el.filter === 'completed') {\r\n                    tasksForRender = tasks[el.id].filter(t => t.isDone)\r\n                }\r\n\r\n\r\n                return (\r\n                    <TodoList\r\n                        key={el.id}\r\n                        todoListID={el.id}\r\n                        filter={el.filter}\r\n                        title={el.title}\r\n                        tasks={tasksForRender}\r\n\r\n                        removeTodolist={removeTodolist}\r\n                        RemoveTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        editTodolist={editTodolist}\r\n                        editTask={editTask}\r\n                    />\r\n                )\r\n\r\n            })\r\n            }\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}