{"version":3,"sources":["components/AddItemForm.tsx","components/EditableSpan.tsx","TodoList.tsx","ButtonAppBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","TaskTestHandler","taskTitle","trim","callBack","TextField","id","label","variant","value","onChange","e","currentTarget","onKeyDown","key","size","Button","onClick","style","maxWidth","maxHeight","minWidth","minHeight","marginLeft","EditableSpan","newTitle","setNewTitle","edit","setEdit","EditTrueHAndler","ChangeTitleHandler","taskClasses","isDone","onBlur","autoFocus","type","margin","className","fontSize","onDoubleClick","color","TodoList","tasksMap","tasks","length","map","t","Checkbox","defaultChecked","checked","changeTaskStatus","todoListID","editTask","IconButton","aria-label","Delete","RemoveTask","buttonClassALL","filter","buttonClassActive","buttonClassCompleted","editTodolist","removeTodolist","addTask","changeFilter","ButtonAppBar","Box","sx","flexGrow","AppBar","position","Toolbar","edge","mr","Typography","component","App","todolistID1","v1","todolistID2","todoLists","setTodoLists","setTasks","removeTask","tasksID","el","newTask","toDoListID","taskId","Container","fixed","Grid","container","paddingTop","newId","spacing","tasksForRender","item","Paper","padding","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.ac8deb60.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Button, TextField} from \"@mui/material\";\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    callBack: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = (props: AddItemFormPropsType) => {\r\n\r\n\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const errorInputStyle = error ? {border: \"2px solid red\", outline: \"none\"} : undefined\r\n\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        if (error && e.currentTarget.value.trim()) {\r\n            setError(false)\r\n        }\r\n    }\r\n    const pressEnter = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        e.key === \"Enter\" && TaskTestHandler() // &&- И при нажати и тру и она запускаеть функцию\r\n    }\r\n    const TaskTestHandler = () => {\r\n        let taskTitle: string = title.trim();\r\n        if (taskTitle !== \"\") {\r\n            props.callBack(taskTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n\r\n        setTitle(\"\")\r\n    }\r\n\r\n    return (\r\n\r\n\r\n        <div>\r\n            <TextField id=\"outlined-basic\"\r\n                       label={error ? \"Title is required!\" : \"Введите текст\"}\r\n                       variant=\"outlined\"\r\n                       value={title}\r\n                       onChange={onChangeHandler}\r\n                       onKeyDown={pressEnter}\r\n                       error={!!error}\r\n                       size='small'\r\n\r\n            />\r\n\r\n            <Button variant=\"contained\"\r\n                    onClick={TaskTestHandler}\r\n                    style={{\r\n                        maxWidth: '38px',\r\n                        maxHeight: '38px',\r\n                        minWidth: '38px',\r\n                        minHeight: '38px',\r\n                        marginLeft: \"5px\"\r\n                    }}\r\n            >+</Button>\r\n        </div>\r\n    );\r\n};\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {log} from \"util\";\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    callBack: (newTitle: string) => void\r\n    isDone?: boolean\r\n}\r\n\r\n\r\nexport const EditableSpan = (props: EditableSpanPropsType) => {\r\n    const [error, setError] = useState<boolean>(false)\r\n    const [newTitle, setNewTitle] = useState<string>(props.title)\r\n\r\n\r\n    const [edit, setEdit] = useState(false)\r\n\r\n\r\n    const EditTrueHAndler = () => {\r\n        setEdit(!edit)\r\n        ChangeTitleHandler()\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitle(e.currentTarget.value)\r\n        if (error && e.currentTarget.value.trim()) {\r\n            setError(false)\r\n        }\r\n    }\r\n    const pressEnter = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        e.key === \"Enter\" && EditTrueHAndler()\r\n    }\r\n\r\n    const ChangeTitleHandler = () => {\r\n        let taskTitle: string = newTitle.trim();\r\n        if (taskTitle !== \"\") {\r\n            props.callBack(taskTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n    const taskClasses = props.isDone ? \"is-done\" : \"\";\r\n\r\n    return (\r\n        edit\r\n            ? <TextField id=\"standard-basic\"\r\n                         label=\"Редактировать текст\"\r\n                         variant=\"standard\"\r\n                         onChange={onChangeHandler}\r\n                         onBlur={EditTrueHAndler}\r\n                         autoFocus type=\"text\"\r\n                         onKeyDown={pressEnter}\r\n                         value={newTitle}\r\n                         size=\"small\"\r\n                         style={{margin:\"6px\",}}\r\n            />\r\n\r\n            : <span className={taskClasses} style={{fontSize:\"20px\"}}\r\n                    onDoubleClick={EditTrueHAndler}> {props.title}\r\n                {error && <div style={{color: \"red\"}}>Title is required!</div>}\r\n            </span>\r\n\r\n    );\r\n};\r\n","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport {FilterValuesType, TaskType} from \"./App\"\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport {EditableSpan} from \"./components/EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@mui/material\";\r\nimport {Delete} from \"@mui/icons-material\";\r\n\r\n\r\ntype TodoListPropsType = {\r\n    todoListID: string\r\n    title: string\r\n    tasks: Array<TaskType> //Tasktype []\r\n    filter: FilterValuesType\r\n    RemoveTask: (todoListID: string, taskID: string) => void\r\n    changeFilter: (todoListID: string, filter: FilterValuesType) => void\r\n    addTask: (todoListID: string, title: string) => void\r\n    changeTaskStatus: (todoListID: string, tasksID: string, isDone: boolean) => void\r\n    removeTodolist: (todoListID: string) => void\r\n    editTodolist: (toDoListID: string, newTitle: string) => void\r\n    editTask: (toDoListID: string, taskId: string, newTitle: string) => void\r\n\r\n}\r\n\r\nconst TodoList = (props: TodoListPropsType) => {\r\n\r\n    const tasksMap = props.tasks.length\r\n        ? props.tasks.map((t) => {\r\n            const editTasktHandler = (newTitle: string) => {\r\n                props.editTask(props.todoListID, t.id, newTitle)\r\n            }\r\n            const removeTask = () => props.RemoveTask(props.todoListID, t.id)\r\n            const ChangeTaskHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                props.changeTaskStatus(props.todoListID, t.id, e.currentTarget.checked)\r\n            }\r\n\r\n            return (<div key={t.id}>\r\n                <Checkbox defaultChecked\r\n                          checked={t.isDone}\r\n                          onChange={ChangeTaskHandler}\r\n\r\n                />\r\n\r\n\r\n                <EditableSpan isDone={t.isDone} title={t.title} callBack={editTasktHandler}/>\r\n\r\n                <IconButton aria-label=\"delete\">\r\n                    <Delete onClick={removeTask}/>\r\n                </IconButton>\r\n\r\n            </div>)\r\n        })\r\n        : <span>empty</span>\r\n\r\n\r\n    const addTaskHandler = (title: string) => {\r\n        props.addTask(props.todoListID, title)\r\n    }\r\n\r\n    const onClickRemoveTodoListHandler = () => {\r\n        props.removeTodolist(props.todoListID)\r\n\r\n    }\r\n    const editTodolistHandler = (newTitle: string) => {\r\n        props.editTodolist(props.todoListID, newTitle)\r\n    }\r\n\r\n\r\n    const buttonClassALL = props.filter === \"all\" ? \"outlined\" : \"contained\"\r\n    const buttonClassActive = props.filter === \"active\" ? \"outlined\" : \"contained\"\r\n    const buttonClassCompleted = props.filter === \"completed\" ? \"outlined\" : \"contained\"\r\n    return (\r\n        <div>\r\n            <h3>\r\n\r\n                <EditableSpan title={props.title} callBack={editTodolistHandler}/>\r\n                <IconButton aria-label=\"delete\">\r\n                    <Delete onClick={onClickRemoveTodoListHandler}/>\r\n                </IconButton>\r\n\r\n            </h3>\r\n            <AddItemForm callBack={addTaskHandler}/>\r\n            <div>\r\n                {tasksMap}\r\n            </div>\r\n\r\n            <div>\r\n                <Button variant={buttonClassALL}\r\n                        onClick={() => props.changeFilter(props.todoListID, \"all\")}>All</Button>\r\n                <Button variant={buttonClassActive}\r\n                        onClick={() => props.changeFilter(props.todoListID, \"active\")}>Active</Button>\r\n                <Button variant={buttonClassCompleted}\r\n                        onClick={() => props.changeFilter(props.todoListID, \"completed\")}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoList;\r\n","import * as React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\n\r\nexport default function ButtonAppBar() {\r\n    return (\r\n        <Box sx={{ flexGrow: 1 }}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{ mr: 2 }}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\r\n                        Menu\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Box>\r\n    );\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport ButtonAppBar from \"./ButtonAppBar\";\r\nimport {Container, Grid, Paper} from \"@mui/material\";\r\n\r\nexport type TaskType = {\r\n    id: string, title: string, isDone: boolean\r\n}\r\n\r\n\r\nexport type TasksType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\nexport type TodolistsType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilterValuesType\r\n}\r\n\r\nconst App = () => {\r\n\r\n    let todolistID1 = v1();\r\n    let todolistID2 = v1();\r\n\r\n    let [todoLists, setTodoLists] = useState<Array<TodolistsType>>([\r\n        {id: todolistID1, title: 'What to learn Front', filter: 'all'},\r\n        {id: todolistID2, title: 'What to learn Back', filter: 'all'},\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksType>({\r\n        [todolistID1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false},\r\n        ],\r\n        [todolistID2]: [\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"NodeJS\", isDone: true},\r\n            {id: v1(), title: \"C#\", isDone: false},\r\n            {id: v1(), title: \"Mongodb\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false},\r\n        ]\r\n    });\r\n\r\n    const removeTask = (todoListID: string, tasksID: string) => {\r\n        setTasks({...tasks, [todoListID]: tasks[todoListID].filter(el => el.id !== tasksID)})\r\n\r\n        //  setTasks(tasks.filter((t) => t.id !== tasksID));\r\n    }\r\n    const changeFilter = (todoListID: string, filter: FilterValuesType) => {\r\n        setTodoLists(todoLists.map(el => el.id === todoListID ? {...el, filter} : el))\r\n    }\r\n\r\n    const addTask = (todoListID: string, title: string) => {\r\n        const newTask: TaskType = {\r\n            id: v1(), title: title, isDone: false,\r\n        }\r\n\r\n        setTasks({...tasks, [todoListID]: [newTask, ...tasks[todoListID]]})\r\n\r\n    }\r\n\r\n    const changeTaskStatus = (todoListID: string, tasksID: string, isDone: boolean) => {\r\n        setTasks({...tasks, [todoListID]: tasks[todoListID].map(el => el.id === tasksID ? {...el, isDone} : el)})\r\n\r\n    }\r\n\r\n    const removeTodolist = (todoListID: string) => {\r\n        setTodoLists(todoLists.filter(el => el.id !== todoListID))\r\n        delete tasks[todoListID];\r\n\r\n    }\r\n    const addTodoList = (title: string) => {\r\n        const newId = v1();\r\n        let newTodolist: TodolistsType = {id: newId, title, filter: \"all\"}\r\n        setTodoLists([newTodolist, ...todoLists])\r\n        setTasks({...tasks, [newId]: [{id: v1(), title: \"New Task\", isDone: false},]})\r\n    }\r\n    const editTodolist = (toDoListID: string, newTitle: string) => {\r\n        setTodoLists(todoLists.map(el => el.id === toDoListID ? {...el, title: newTitle} : el))\r\n    }\r\n    const editTask = (toDoListID: string, taskId: string, newTitle: string) => {\r\n        setTasks({\r\n            ...tasks,\r\n            [toDoListID]: tasks[toDoListID].map(el => el.id === taskId ? {...el, title: newTitle} : el)\r\n        })\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"App\">\r\n            <ButtonAppBar/>\r\n            <Container fixed>\r\n                <Grid container style={{paddingTop: '10px'}}>\r\n                    <span>Add todoList </span>-\r\n                    <AddItemForm callBack={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoLists.map((el) => {\r\n\r\n                        let tasksForRender = tasks[el.id]\r\n                        if (el.filter === 'active') {\r\n                            tasksForRender = tasks[el.id].filter(t => !t.isDone)\r\n                        }\r\n                        if (el.filter === 'completed') {\r\n                            tasksForRender = tasks[el.id].filter(t => t.isDone)\r\n                        }\r\n\r\n\r\n                        return (<Grid item key={el.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <TodoList\r\n                                        key={el.id}\r\n                                        todoListID={el.id}\r\n                                        filter={el.filter}\r\n                                        title={el.title}\r\n                                        tasks={tasksForRender}\r\n\r\n                                        removeTodolist={removeTodolist}\r\n                                        RemoveTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeTaskStatus}\r\n                                        editTodolist={editTodolist}\r\n                                        editTask={editTask}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n\r\n                    })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}